p_value_1D_projection = P_value_1D_projection(information, lambda_projection_list, NPMLE_2D_result$mass)
hist(p_value_1D_projection)
length(my_BH(p_value_1D_projection, alpha))
p_value_Welch = P_value_Welch(information)
hist(p_value_Welch)
length(my_BH(p_value_Welch, alpha))
p_value_t = P_value_pooled_t_test(information)
hist(p_value_t)
length(my_BH(p_value_t, alpha))
p_value_EVD = P_value_EVD_NPMLE(information, EVD_NPMLE_1D_parameter)
hist(p_value_EVD)
length(my_BH(p_value_EVD, alpha))
p_value_EV = P_value_EV_NPMLE(information, EV_NPMLE_1D_parameter)
hist(p_value_EV)
length(my_BH(p_value_EV, alpha))
w_vbg = vbg$weights
vbg = voomByGroup(y, design = design, group = group_assignment, plot = 'combine')
w_vbg = vbg$weights
#w_A = w_vbg[, c(1,2,6,7,8,9,10)]
#w_B = w_vbg[, c(3,4,5)]
w_A = w_vbg[, c(1,2,3,4,8)]
w_B = w_vbg[, c(5,6,7)]
Y_A = Y1
Y_B = Y2
source('voom_EPB.R')
information_vbg = information_extractor(Y_A, Y_B, w_A, w_B)
p_value_1D_NPMLE_vbg = P_value_1D_NPMLE(information_vbg, NPMLE_1D_parameter)
hist(p_value_1D_NPMLE_vbg)
length(my_BH(p_value_1D_NPMLE_vbg, alpha))
p_value_EVD_vbg = P_value_EVD_NPMLE(information_vbg, EVD_NPMLE_1D_parameter)
hist(p_value_EVD_vbg)
length(my_BH(p_value_EVD_vbg, alpha))
p_value_EV_vbg = P_value_EV_NPMLE(information_vbg, EV_NPMLE_1D_parameter)
hist(p_value_EV_vbg)
length(my_BH(p_value_EV_vbg, alpha))
m = 9
n = 13
m1 = 0
m2 = 6.225
s1 = 18
s2 = 78
library(xasht)
library(asht)
bfControl<-function(calcmethod=c("int","mc"),epsilon=10^(-8), nmc=10^5){
calcmethod<-match.arg(calcmethod)
if (nmc<2) stop("nmc must get greater than 2, for quite accurate answers use 10^5 or more")
if (epsilon<=0 | epsilon>1) stop("epsilon should be a very small positive number")
list(calcmethod=calcmethod,epsilon=epsilon, nmc=nmc)
}
bfControl()
n1 = 9
n2 = 13
u1 = 0
u2 = 6.225
s1 = 18
s2 = 78
ifunc = function(x, b = 0){
pt( (b+u1-u2+(s1/sqrt(n1))*x)/(s2/sqrt(n2)),n2-1) * dt(x,n1-1)
}
p.L = integrate(ifunc,-Inf,Inf)$value
ifunc = function(x, b = 0){
pt( (b+u1-u2+(s1/sqrt(n1))*x)/(s2/sqrt(n2)),n2-1) * dt(x,n1-1)
}
p.L = integrate(ifunc,-Inf,Inf)$value
p.L
ifunc = function(x, b = 0){
pt( (b + u1 - u2 + (s1 / sqrt(n1)) * x) / (s2 / sqrt(n2)), n2-1) * dt(x, n1-1)
}
p.L = integrate(ifunc,-Inf,Inf)$value
p.L
n1 = 9
n2 = 13
u1 = 0
u2 = 6.225
s1 = sqrt(18)
s2 = sqrt(78)
ifunc = function(x, b = 0){
pt( (b + u1 - u2 + (s1 / sqrt(n1)) * x) / (s2 / sqrt(n2)), n2-1) * dt(x, n1-1)
}
p.L = integrate(ifunc,-Inf,Inf)$value
p.L
n2 = 9
n1 = 13
u2 = 0
u1 = 6.225
s2 = sqrt(18)
s1 = sqrt(78)
ifunc = function(x, b = 0){
pt( (b + u1 - u2 + (s1 / sqrt(n1)) * x) / (s2 / sqrt(n2)), n2-1) * dt(x, n1-1)
}
p.L = integrate(ifunc,-Inf,Inf)$value
p.L
ifunc = function(x, b = 0){
pt( (b + u1 - u2 + (s1 / sqrt(n1)) * x) / (s2 / sqrt(n2)), n2-1) * dt(x, n1-1)
}
p.L = integrate(ifunc,-Inf,Inf)$value
min(2*p.L,2*(1-p.L)
ifunc = function(x, b = 0){
pt( (b + u1 - u2 + (s1 / sqrt(n1)) * x) / (s2 / sqrt(n2)), n2-1) * dt(x, n1-1)
}
p.L = integrate(ifunc,-Inf,Inf)$value
min(2 * p.L, 2 * (1 - p.L)
ifunc = function(x, b = 0){
pt( (b + u1 - u2 + (s1 / sqrt(n1)) * x) / (s2 / sqrt(n2)), n2-1) * dt(x, n1-1)
}
p.L = integrate(ifunc,-Inf,Inf)$value
min(2 * p.L, 2 * (1 - p.L))
n1 = 9
n2 = 13
u1 = 0
u2 = 6.225
s1 = sqrt(18)
s2 = sqrt(78)
ifunc = function(x, b = 0){
pt( (b + u1 - u2 + (s1 / sqrt(n1)) * x) / (s2 / sqrt(n2)), n2-1) * dt(x, n1-1)
}
p.L = integrate(ifunc,-Inf,Inf)$value
min(2 * p.L, 2 * (1 - p.L))
ifunc = function(x, b = 0){
pt( (b + u2 - u1 + (s1 / sqrt(n1)) * x) / (s2 / sqrt(n2)), n2-1) * dt(x, n1-1)
}
p.L = integrate(ifunc,-Inf,Inf)$value
min(2 * p.L, 2 * (1 - p.L))
ifunc = function(x, b = 0){
pt( (b + u1 - u2 + (s1 / sqrt(n1)) * x) / (s2 / sqrt(n2)), n2-1) * dt(x, n1-1)
}
p.L = integrate(ifunc,-Inf,Inf)$value
min(2 * p.L, 2 * (1 - p.L))
ifunc = function(x, b = 0){
pt( (b + u2 - u1 + (s1 / sqrt(n1)) * x) / (s2 / sqrt(n2)), n2-1) * dt(x, n1-1)
}
p.L = integrate(ifunc,-Inf,Inf)$value
min(2 * p.L, 2 * (1 - p.L))
n1 = 9
n2 = 13
u1 = 1
u2 = 7.225
s1 = sqrt(18)
s2 = sqrt(78)
ifunc = function(x, b = 0){
pt( (b + u2 - u1 + (s1 / sqrt(n1)) * x) / (s2 / sqrt(n2)), n2-1) * dt(x, n1-1)
}
p.L = integrate(ifunc,-Inf,Inf)$value
min(2 * p.L, 2 * (1 - p.L))
ifunc = function(x, b = 0){
pt( (b + u1 - u2 + (s1 / sqrt(n1)) * x) / (s2 / sqrt(n2)), n2-1) * dt(x, n1-1)
}
p.L = integrate(ifunc,-Inf,Inf)$value
min(2 * p.L, 2 * (1 - p.L))
pooled_t_test_p = function(n1, n2, Z1, Z2, S1, S2) {
Spool = sqrt(((n1-1) * S1 + (n2-1) * S2) / (n1 + n2 - 2))
se = Spool * sqrt(1/n1 + 1/n2)
t = (Z1 - Z2)/se
p = pt(q = abs(t), df = n1 + n2 -2, lower.tail = FALSE) * 2
return (p)
}
pooled_t_test_p = function(n1, n2, Z1, Z2, S1, S2) {
Spool = sqrt(((n1-1) * S1 + (n2-1) * S2) / (n1 + n2 - 2))
se = Spool * sqrt(1/n1 + 1/n2)
t = (Z1 - Z2)/se
p = pt(q = abs(t), df = n1 + n2 -2, lower.tail = FALSE) * 2
return (p)
}
pooled_t_test_p(n1, n2, u1, u2, s1^2, s2^2)
Welch_approximation_p = function(n1, n2, Z1, Z2, S1, S2) {
dfw = (S1/n1 + S2/n2)^2/(1 / (n1-1) * (S1/n1)^2 + 1 / (n2-1) * (S2/n2)^2)
se2 = S1/n1 + S2/n2
tw = (Z1 - Z2)/sqrt(se2)
p = pt(q = abs(tw), df = dfw, lower.tail = FALSE) * 2
return (p)
}
Welch_approximation_p = function(n1, n2, Z1, Z2, S1, S2) {
dfw = (S1/n1 + S2/n2)^2/(1 / (n1-1) * (S1/n1)^2 + 1 / (n2-1) * (S2/n2)^2)
se2 = S1/n1 + S2/n2
tw = (Z1 - Z2)/sqrt(se2)
p = pt(q = abs(tw), df = dfw, lower.tail = FALSE) * 2
return (p)
}
Welch_approximation_p(n1, n2, u1, u2, s1^2, s2^2)
n1 = 9
n2 = 13
u1 = 0
u2 = 6.225
s1 = sqrt(18)
s2 = sqrt(78)
ifunc = function(x, b = 0){
pt( (b + u1 - u2 + (s1 / sqrt(n1)) * x) / (s2 / sqrt(n2)), n2-1) * dt(x, n1-1)
}
p.L = integrate(ifunc,-Inf,Inf)$value
min(2 * p.L, 2 * (1 - p.L))
pooled_t_test_p = function(n1, n2, Z1, Z2, S1, S2) {
Spool = sqrt(((n1-1) * S1 + (n2-1) * S2) / (n1 + n2 - 2))
se = Spool * sqrt(1/n1 + 1/n2)
t = (Z1 - Z2)/se
p = pt(q = abs(t), df = n1 + n2 -2, lower.tail = FALSE) * 2
return (p)
}
pooled_t_test_p(n1, n2, u1, u2, s1^2, s2^2)
Welch_approximation_p = function(n1, n2, Z1, Z2, S1, S2) {
dfw = (S1/n1 + S2/n2)^2/(1 / (n1-1) * (S1/n1)^2 + 1 / (n2-1) * (S2/n2)^2)
se2 = S1/n1 + S2/n2
tw = (Z1 - Z2)/sqrt(se2)
p = pt(q = abs(tw), df = dfw, lower.tail = FALSE) * 2
return (p)
}
Welch_approximation_p(n1, n2, u1, u2, s1^2, s2^2)
n1 = 9
n2 = 13
u1 = 6.225
u2 = 0
s1 = sqrt(18)
s2 = sqrt(78)
ifunc = function(x, b = 0){
pt( (b + u1 - u2 + (s1 / sqrt(n1)) * x) / (s2 / sqrt(n2)), n2-1) * dt(x, n1-1)
}
p.L = integrate(ifunc,-Inf,Inf)$value
min(2 * p.L, 2 * (1 - p.L))
pooled_t_test_p = function(n1, n2, Z1, Z2, S1, S2) {
Spool = sqrt(((n1-1) * S1 + (n2-1) * S2) / (n1 + n2 - 2))
se = Spool * sqrt(1/n1 + 1/n2)
t = (Z1 - Z2)/se
p = pt(q = abs(t), df = n1 + n2 -2, lower.tail = FALSE) * 2
return (p)
}
pooled_t_test_p(n1, n2, u1, u2, s1^2, s2^2)
Welch_approximation_p = function(n1, n2, Z1, Z2, S1, S2) {
dfw = (S1/n1 + S2/n2)^2/(1 / (n1-1) * (S1/n1)^2 + 1 / (n2-1) * (S2/n2)^2)
se2 = S1/n1 + S2/n2
tw = (Z1 - Z2)/sqrt(se2)
p = pt(q = abs(tw), df = dfw, lower.tail = FALSE) * 2
return (p)
}
Welch_approximation_p(n1, n2, u1, u2, s1^2, s2^2)
n1 = 9
n2 = 13
u1 = 0
u2 = 6.225
s1 = sqrt(18)
s2 = sqrt(78)
ifunc = function(x, b = 0){
pt( (b + u1 - u2 + (s1 / sqrt(n1)) * x) / (s2 / sqrt(n2)), n2-1) * dt(x, n1-1)
}
p.L = integrate(ifunc,-Inf,Inf)$value
min(2 * p.L, 2 * (1 - p.L))
pooled_t_test_p = function(n1, n2, Z1, Z2, S1, S2) {
Spool = sqrt(((n1-1) * S1 + (n2-1) * S2) / (n1 + n2 - 2))
se = Spool * sqrt(1/n1 + 1/n2)
t = (Z1 - Z2)/se
p = pt(q = abs(t), df = n1 + n2 -2, lower.tail = FALSE) * 2
return (p)
}
pooled_t_test_p(n1, n2, u1, u2, s1^2, s2^2)
Welch_approximation_p = function(n1, n2, Z1, Z2, S1, S2) {
dfw = (S1/n1 + S2/n2)^2/(1 / (n1-1) * (S1/n1)^2 + 1 / (n2-1) * (S2/n2)^2)
se2 = S1/n1 + S2/n2
tw = (Z1 - Z2)/sqrt(se2)
p = pt(q = abs(tw), df = dfw, lower.tail = FALSE) * 2
return (p)
}
Welch_approximation_p(n1, n2, u1, u2, s1^2, s2^2)
l = s1^2/s2^2
rho = 5
c = l / (l + n1/n2)
gamma = (1/rho) / (1/rho + n1/n2)
p_given_lambda = function(n1, n2, Z1, Z2, S1, S2, lambda) {
upper = (Z1 - Z2) * sqrt(n1 + n2 - 2)
lower = sqrt((n1-1) * (n2 * lambda + n1) / (n1 * n2 * lambda) * S1 + (n2-1) * (n2 * lambda + n1) / (n1 * n2) * S2)
test_stat = upper/lower
p = pt(q = abs(test_stat), df = n1 + n2 - 2, lower.tail = FALSE) * 2
out = p
}
p_given_lambda(n1, n2, u1, u2, s1^2, s2^2, 2)
rho_list_999 = seq(0.32, 38.72, 0.01)
rho_list_999
print(p_given_lambda(n1, n2, u1, u2, s1^2, s2^2, 1/rho_list_999))
plot(rho_list_999, p_given_lambda(n1, n2, u1, u2, s1^2, s2^2, 1/rho_list_999))
plot(rho_list_999, p_given_lambda(n1, n2, u1, u2, s1^2, s2^2, 1/rho_list_999), type = 'l')
max(p_given_lambda(n1, n2, u1, u2, s1^2, s2^2, 1/rho_list_999))
rho_list_999 = seq(0.32, 38.72, length.out = 1000)
max(p_given_lambda(n1, n2, u1, u2, s1^2, s2^2, 1/rho_list_999))
plot(rho_list_999, p_given_lambda(n1, n2, u1, u2, s1^2, s2^2, 1/rho_list_999), type = 'l')
rho_list_999 = seq(0.32, 38.72, length.out = 10)
max(p_given_lambda(n1, n2, u1, u2, s1^2, s2^2, 1/rho_list_999))
plot(rho_list_999, p_given_lambda(n1, n2, u1, u2, s1^2, s2^2, 1/rho_list_999), type = 'l')
rho_list_999 = seq(0.32, 38.72, length.out = 1000)
max(p_given_lambda(n1, n2, u1, u2, s1^2, s2^2, 1/rho_list_999))
plot(rho_list_999, p_given_lambda(n1, n2, u1, u2, s1^2, s2^2, 1/rho_list_999), type = 'l')
qf(0.001/2, n1-1, n2-1, lower.tail = TRUE)
l = s1^2 / s2^2
qf(0.001/2, n1-1, n2-1, lower.tail = TRUE) / l
qf(0.001/2, n1-1, n2-1, lower.tail = TRUE) / l
qf(1 - 0.001/2, n1-1, n2-1, lower.tail = TRUE) / l
rho_list_999 = seq(qf(0.001/2, n1-1, n2-1, lower.tail = TRUE) / l, qf(1 - 0.001/2, n1-1, n2-1, lower.tail = TRUE) / l, length.out = 1000)
max(p_given_lambda(n1, n2, u1, u2, s1^2, s2^2, 1/rho_list_999))
plot(rho_list_999, p_given_lambda(n1, n2, u1, u2, s1^2, s2^2, 1/rho_list_999), type = 'l')
max(p_given_lambda(n1, n2, u1, u2, s1^2, s2^2, 1/rho_list_999)) + 0.001
rho_list_99 = seq(qf(0.01/2, n1-1, n2-1, lower.tail = TRUE) / l, qf(1 - 0.01/2, n1-1, n2-1, lower.tail = TRUE) / l, length.out = 1000)
max(p_given_lambda(n1, n2, u1, u2, s1^2, s2^2, 1/rho_list_99)) + 0.01
max(p_given_lambda(n1, n2, u1, u2, s1^2, s2^2, 1/rho_list_99)) + 0.01
df_l = function(n1, n2, l) {
(l / n1 + 1/n2)^2 / (1 / (n1-1) * (l/n1)^2 + 1 / (n2-1) * (1 / n2)^2)
}
Welch_given_df = function(n1, n2, Z1, Z2, S1, S2, dfw) {
se2 = S1/n1 + S2/n2
tw = (Z1 - Z2)/sqrt(se2)
p = pt(q = abs(tw), df = dfw, lower.tail = FALSE) * 2
return (p)
}
mean(Welch_given_df(n1, n2, u1, u2, s1^2, s2^2, df_list))
rho = 5
l_list = rf(1000, n1-1, n2-1) / rho
df_list = df_l(n1, n2, l_list)
Welch_given_df = function(n1, n2, Z1, Z2, S1, S2, dfw) {
se2 = S1/n1 + S2/n2
tw = (Z1 - Z2)/sqrt(se2)
p = pt(q = abs(tw), df = dfw, lower.tail = FALSE) * 2
return (p)
}
mean(Welch_given_df(n1, n2, u1, u2, s1^2, s2^2, df_list))
rho_list_999 = seq(qf(0.001/2, n1-1, n2-1, lower.tail = TRUE) / l, qf(1 - 0.001/2, n1-1, n2-1, lower.tail = TRUE) / l, length.out = 1000)
l_list = rf(1000, n1-1, n2-1) / rho
df_list = df_l(n1, n2, l_list)
p_rho = c()
for (rho in rho_list_999) {
l_list = rf(1000, n1-1, n2-1) / rho
df_list = df_l(n1, n2, l_list)
p_rho = c(p_rho, mean(Welch_given_df(n1, n2, u1, u2, s1^2, s2^2, df_list)))
}
plot(rho_list_999, p_rho)
plot(rho_list_999, p_rho, type = 'l')
p_rho = c()
for (rho in rho_list_999) {
l_list = rf(10000, n1-1, n2-1) / rho
df_list = df_l(n1, n2, l_list)
p_rho = c(p_rho, mean(Welch_given_df(n1, n2, u1, u2, s1^2, s2^2, df_list)))
}
rho_list_999 = seq(qf(0.001/2, n1-1, n2-1, lower.tail = TRUE) / l, qf(1 - 0.001/2, n1-1, n2-1, lower.tail = TRUE) / l, length.out = 100)
p_rho = c()
for (rho in rho_list_999) {
l_list = rf(10000, n1-1, n2-1) / rho
df_list = df_l(n1, n2, l_list)
p_rho = c(p_rho, mean(Welch_given_df(n1, n2, u1, u2, s1^2, s2^2, df_list)))
}
plot(rho_list_999, p_rho, type = 'l')
max(p_rho) + 0.001
plot(rho_list_999, p_rho, type = 'l', ylim = c(0.04, 0.06))
plot(rho_list_999, p_rho, type = 'l', ylim = c(0.04, 0.055))
plot(rho_list_999, p_rho, type = 'l', ylim = c(0.04, 0.053))
plot(rho_list_999, p_rho, type = 'l', ylim = c(0.04, 0.050))
rho_list_9999 = seq(qf(0.0001/2, n1-1, n2-1, lower.tail = TRUE) / l, qf(1 - 0.0001/2, n1-1, n2-1, lower.tail = TRUE) / l, length.out = 100)
p_rho = c()
for (rho in rho_list_9999) {
l_list = rf(10000, n1-1, n2-1) / rho
df_list = df_l(n1, n2, l_list)
p_rho = c(p_rho, mean(Welch_given_df(n1, n2, u1, u2, s1^2, s2^2, df_list)))
}
plot(rho_list_9999, p_rho, type = 'l', ylim = c(0.04, 0.050))
rho_list = seq(0.01, 40, length.out = 100)
rho_list = seq(0.01, 40, length.out = 500)
p_rho = c()
for (rho in rho_list) {
l_list = rf(10000, n1-1, n2-1) / rho
df_list = df_l(n1, n2, l_list)
p_rho = c(p_rho, mean(Welch_given_df(n1, n2, u1, u2, s1^2, s2^2, df_list)))
}
plot(rho_list, p_rho, type = 'l', ylim = c(0.04, 0.050))
plot(rho_list, p_rho, type = 'l', ylim = c(0.04, 0.055))
plot(rho_list, p_rho, type = 'l', ylim = c(0.04, 0.06))
rho_list = seq(0.03, 40, length.out = 500)
p_rho = c()
for (rho in rho_list) {
l_list = rf(10000, n1-1, n2-1) / rho
df_list = df_l(n1, n2, l_list)
p_rho = c(p_rho, mean(Welch_given_df(n1, n2, u1, u2, s1^2, s2^2, df_list)))
}
plot(rho_list, p_rho, type = 'l', ylim = c(0.04, 0.06))
rho_list = seq(0.3, 40, length.out = 500)
p_rho = c()
for (rho in rho_list) {
l_list = rf(10000, n1-1, n2-1) / rho
df_list = df_l(n1, n2, l_list)
p_rho = c(p_rho, mean(Welch_given_df(n1, n2, u1, u2, s1^2, s2^2, df_list)))
}
plot(rho_list, p_rho, type = 'l', ylim = c(0.04, 0.06))
rho_list = seq(0.2, 40, length.out = 500)
p_rho = c()
for (rho in rho_list) {
l_list = rf(10000, n1-1, n2-1) / rho
df_list = df_l(n1, n2, l_list)
p_rho = c(p_rho, mean(Welch_given_df(n1, n2, u1, u2, s1^2, s2^2, df_list)))
}
plot(rho_list, p_rho, type = 'l', ylim = c(0.04, 0.06))
plot(rho_list, p_rho, type = 'l', ylim = c(0.04, 0.055))
plot(rho_list, p_rho, type = 'l', ylim = c(0.04, 0.053))
plot(rho_list, p_rho, type = 'l', ylim = c(0.04, 0.053), ylab = 'P-Value', xlab = 'Ratio of Variance')
plot(rho_list, p_rho, type = 'l', ylim = c(0.04, 0.053), ylab = 'P-Value',
xlab = 'Ratio of Variance')
library(asht)
n1 = 9
n2 = 13
u1 = 0
u2 = 6.225
s1 = sqrt(18)
s2 = sqrt(78)
n1 = 9
n2 = 13
u1 = 0
u2 = 6.225
s1 = sqrt(18)
s2 = sqrt(78)
ifunc = function(x, b = 0){
pt( (b + u1 - u2 + (s1 / sqrt(n1)) * x) / (s2 / sqrt(n2)), n2-1) * dt(x, n1-1)
}
p.L = integrate(ifunc,-Inf,Inf)$value
min(2 * p.L, 2 * (1 - p.L))
pooled_t_test_p = function(n1, n2, Z1, Z2, S1, S2) {
Spool = sqrt(((n1-1) * S1 + (n2-1) * S2) / (n1 + n2 - 2))
se = Spool * sqrt(1/n1 + 1/n2)
t = (Z1 - Z2)/se
p = pt(q = abs(t), df = n1 + n2 -2, lower.tail = FALSE) * 2
return (p)
}
pooled_t_test_p(n1, n2, u1, u2, s1^2, s2^2)
Welch_approximation_p = function(n1, n2, Z1, Z2, S1, S2) {
dfw = (S1/n1 + S2/n2)^2/(1 / (n1-1) * (S1/n1)^2 + 1 / (n2-1) * (S2/n2)^2)
se2 = S1/n1 + S2/n2
tw = (Z1 - Z2)/sqrt(se2)
p = pt(q = abs(tw), df = dfw, lower.tail = FALSE) * 2
return (p)
}
Welch_approximation_p(n1, n2, u1, u2, s1^2, s2^2)
df_l = function(n1, n2, l) {
(l / n1 + 1/n2)^2 / (1 / (n1-1) * (l/n1)^2 + 1 / (n2-1) * (1 / n2)^2)
}
Welch_given_df = function(n1, n2, Z1, Z2, S1, S2, dfw) {
se2 = S1/n1 + S2/n2
tw = (Z1 - Z2)/sqrt(se2)
p = pt(q = abs(tw), df = dfw, lower.tail = FALSE) * 2
return (p)
}
rho_list = seq(0.2, 40, length.out = 500)
p_rho = c()
for (rho in rho_list) {
l_list = rf(10000, n1-1, n2-1) / rho
df_list = df_l(n1, n2, l_list)
p_rho = c(p_rho, mean(Welch_given_df(n1, n2, u1, u2, s1^2, s2^2, df_list)))
}
plot(rho_list, p_rho, type = 'l', ylim = c(0.04, 0.053), ylab = 'P-Value',
xlab = 'Ratio of Variance')
rho_list_999 = seq(qf(0.001/2, n1-1, n2-1, lower.tail = TRUE) / l,
qf(1 - 0.001/2, n1-1, n2-1, lower.tail = TRUE) / l,
length.out = 100)
p_rho_999 = c()
for (rho in rho_list_999) {
l_list = rf(10000, n1-1, n2-1) / rho
df_list = df_l(n1, n2, l_list)
p_rho_999 = c(p_rho_999, mean(Welch_given_df(n1, n2, u1, u2, s1^2, s2^2, df_list)))
}
plot(rho_list_999, p_rho, type = 'l', ylim = c(0.04, 0.050))
plot(rho_list_999, p_rho_999, type = 'l', ylim = c(0.04, 0.050))
max(p_rho_999) + 0.001
CI_rho = c(qf(0.001/2, n1-1, n2-1, lower.tail = TRUE) / l,
qf(1 - 0.001/2, n1-1, n2-1, lower.tail = TRUE) / l)
CI_rho = c(qf(0.001/2, n1-1, n2-1, lower.tail = TRUE) / l,
qf(1 - 0.001/2, n1-1, n2-1, lower.tail = TRUE) / l)
CI_rho
rho_list_999 = seq(0.32, 38.72, length.out = 100)
p_rho_999 = c()
for (rho in rho_list_999) {
l_list = rf(10000, n1-1, n2-1) / rho
df_list = df_l(n1, n2, l_list)
p_rho_999 = c(p_rho_999, mean(Welch_given_df(n1, n2, u1, u2, s1^2, s2^2, df_list)))
}
max(p_rho_999) + 0.001
rho_list_999 = seq(0.32, 38.72, length.out = 1000)
p_rho_999 = c()
for (rho in rho_list_999) {
l_list = rf(10000, n1-1, n2-1) / rho
df_list = df_l(n1, n2, l_list)
p_rho_999 = c(p_rho_999, mean(Welch_given_df(n1, n2, u1, u2, s1^2, s2^2, df_list)))
}
max(p_rho_999) + 0.001
p_rho_999 = c()
for (rho in rho_list_999) {
l_list = rf(100000, n1-1, n2-1) / rho
df_list = df_l(n1, n2, l_list)
p_rho_999 = c(p_rho_999, mean(Welch_given_df(n1, n2, u1, u2, s1^2, s2^2, df_list)))
}
max(p_rho_999) + 0.001
l = s1^2 / s2^2
p_given_lambda = function(n1, n2, Z1, Z2, S1, S2, lambda) {
upper = (Z1 - Z2) * sqrt(n1 + n2 - 2)
lower = sqrt((n1-1) * (n2 * lambda + n1) / (n1 * n2 * lambda) * S1 + (n2-1) * (n2 * lambda + n1) / (n1 * n2) * S2)
test_stat = upper/lower
p = pt(q = abs(test_stat), df = n1 + n2 - 2, lower.tail = FALSE) * 2
out = p
}
max(p_given_lambda(n1, n2, u1, u2, s1^2, s2^2, 1/rho_list_999)) + 0.001
plot(rho_list_999, p_given_lambda(n1, n2, u1, u2, s1^2, s2^2, 1/rho_list_999), type = 'l')
rho_list_99 = seq(qf(0.01/2, n1-1, n2-1, lower.tail = TRUE) / l, qf(1 - 0.01/2, n1-1, n2-1, lower.tail = TRUE) / l, length.out = 1000)
max(p_given_lambda(n1, n2, u1, u2, s1^2, s2^2, 1/rho_list_99)) + 0.01
plot(rho_list_999, p_given_lambda(n1, n2, u1, u2, s1^2, s2^2, 1/rho_list_999),
type = 'l', ylab = 'P(rho)', xlab = 'rho')
rho_list_99 = seq(qf(0.01/2, n1-1, n2-1, lower.tail = TRUE) / l, qf(1 - 0.01/2, n1-1, n2-1, lower.tail = TRUE) / l, length.out = 1000)
max(p_given_lambda(n1, n2, u1, u2, s1^2, s2^2, 1/rho_list_99)) + 0.01
n1 = 9
n2 = 13
u1 = 0
u2 = 6.225
s1 = sqrt(18)
s2 = sqrt(78)
l = s1^2 / s2^2
