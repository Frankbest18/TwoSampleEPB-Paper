legend('topright', c('1D-NPMLE', '2D-NPMLE', 'Welch', 'B-F', 't-test'), col=c('blue', 'black', 'green', 'pink', 'red'), pch = c(0,1,2,5,6), lwd=2, lty = 1, cex = 1.5, inset = c(-0.5, 0))
dev.off()
#par(mfrow = c(3,2))
png("combined_plot_with_legend.png", width = 4000, height = 1500, res = 300)
par(mfrow = c(1, 2), mar = c(4,4,4,2), oma = c(1, 1, 0, 13), mgp = c(2.8, 1, 0))
FDR_plotter(3,7,Full_FDR_Data)
Power_plotter(3,7,Full_Power_Data)
#FDR_plotter(5,7,Full_FDR_Data)
#Power_plotter(5,7,Full_Power_Data)
#FDR_plotter(7,7,Full_FDR_Data)
#Power_plotter(7,7,Full_Power_Data)
#par(mfrow = c(1,1))
par(xpd = NA)
legend('topright', c('1D-NPMLE', '2D-NPMLE', 'Welch', 'B-F', 't-test'), col=c('blue', 'black', 'green', 'pink', 'red'), pch = c(0,1,2,5,6), lwd=2, lty = 1, cex = 1.5, inset = c(-0.5, 0))
dev.off()
#par(mfrow = c(3,2))
png("combined_plot_with_legend.png", width = 4000, height = 1500, res = 300)
par(mfrow = c(1, 2), mar = c(2,4,4,2), oma = c(1, 1, 0, 13), mgp = c(2.8, 1, 0))
FDR_plotter(3,7,Full_FDR_Data)
Power_plotter(3,7,Full_Power_Data)
#FDR_plotter(5,7,Full_FDR_Data)
#Power_plotter(5,7,Full_Power_Data)
#FDR_plotter(7,7,Full_FDR_Data)
#Power_plotter(7,7,Full_Power_Data)
#par(mfrow = c(1,1))
par(xpd = NA)
legend('topright', c('1D-NPMLE', '2D-NPMLE', 'Welch', 'B-F', 't-test'), col=c('blue', 'black', 'green', 'pink', 'red'), pch = c(0,1,2,5,6), lwd=2, lty = 1, cex = 1.5, inset = c(-0.5, 0))
dev.off()
#par(mfrow = c(3,2))
png("combined_plot_with_legend.png", width = 4000, height = 1500, res = 300)
par(mfrow = c(1, 2), mar = c(4,4,2,2), oma = c(1, 1, 0, 13), mgp = c(2.8, 1, 0))
FDR_plotter(3,7,Full_FDR_Data)
Power_plotter(3,7,Full_Power_Data)
#FDR_plotter(5,7,Full_FDR_Data)
#Power_plotter(5,7,Full_Power_Data)
#FDR_plotter(7,7,Full_FDR_Data)
#Power_plotter(7,7,Full_Power_Data)
#par(mfrow = c(1,1))
par(xpd = NA)
legend('topright', c('1D-NPMLE', '2D-NPMLE', 'Welch', 'B-F', 't-test'), col=c('blue', 'black', 'green', 'pink', 'red'), pch = c(0,1,2,5,6), lwd=2, lty = 1, cex = 1.5, inset = c(-0.5, 0))
dev.off()
#par(mfrow = c(3,2))
png("combined_plot_with_legend.png", width = 4000, height = 1500, res = 300)
par(mfrow = c(1, 2), mar = c(4,4,2,2), oma = c(1, 1, 0, 13), mgp = c(2.8, 1, 0))
FDR_plotter(3,7,Full_FDR_Data)
Power_plotter(3,7,Full_Power_Data)
#FDR_plotter(5,7,Full_FDR_Data)
#Power_plotter(5,7,Full_Power_Data)
#FDR_plotter(7,7,Full_FDR_Data)
#Power_plotter(7,7,Full_Power_Data)
#par(mfrow = c(1,1))
par(xpd = NA)
legend('topright', c('1D-NPMLE', '2D-NPMLE', 'Welch', 'B-F', 't-test'), col=c('blue', 'black', 'green', 'pink', 'red'), pch = c(0,1,2,5,6), lwd=2, lty = 1, cex = 1.5, inset = c(-0.7, 0))
dev.off()
#par(mfrow = c(3,2))
png("combined_plot_with_legend.png", width = 4000, height = 1500, res = 300)
par(mfrow = c(1, 2), mar = c(4,4,2,2), oma = c(1, 1, 0, 13), mgp = c(2.8, 1, 0))
FDR_plotter(3,7,Full_FDR_Data)
Power_plotter(3,7,Full_Power_Data)
#FDR_plotter(5,7,Full_FDR_Data)
#Power_plotter(5,7,Full_Power_Data)
#FDR_plotter(7,7,Full_FDR_Data)
#Power_plotter(7,7,Full_Power_Data)
#par(mfrow = c(1,1))
par(xpd = NA)
legend('topright', c('1D-NPMLE', '2D-NPMLE', 'Welch', 'B-F', 't-test'), col=c('blue', 'black', 'green', 'pink', 'red'), pch = c(0,1,2,5,6), lwd=2, lty = 1, cex = 1.5, inset = c(-0.6, 0))
dev.off()
#par(mfrow = c(3,2))
png("combined_plot_with_legend.png", width = 4000, height = 1500, res = 300)
par(mfrow = c(1, 2), mar = c(4,4,2,2), oma = c(1, 1, 0, 13), mgp = c(2.8, 1, 0))
FDR_plotter(5,7,Full_FDR_Data)
Power_plotter(5,7,Full_Power_Data)
#FDR_plotter(5,7,Full_FDR_Data)
#Power_plotter(5,7,Full_Power_Data)
#FDR_plotter(7,7,Full_FDR_Data)
#Power_plotter(7,7,Full_Power_Data)
#par(mfrow = c(1,1))
par(xpd = NA)
legend('topright', c('1D-NPMLE', '2D-NPMLE', 'Welch', 'B-F', 't-test'), col=c('blue', 'black', 'green', 'pink', 'red'), pch = c(0,1,2,5,6), lwd=2, lty = 1, cex = 1.5, inset = c(-0.6, 0))
dev.off()
Full_FDR_Data = read.csv('./Full Data/Full_FDR_Data_new.csv')
Full_Power_Data = read.csv('./Full Data/Full_Power_Data_new.csv')
Full_FDR_Data
FDR_plotter = function(n1, length_n2, Full_FDR_Data) {
n2_range = c(n1: (n1 + length_n2 - 1))
FDR_n1 = Full_FDR_Data[Full_FDR_Data$n1 == n1 & (Full_FDR_Data$n2 %in% n2_range), ]
#main = substitute(expression(paste('Relation between FDR and ', n[2], ' for All Algorithms when ', n[1] == N1)), list(N1 = n1))
#plot(FDR_n1$n2, FDR_n1$X1D_NPMLE, type = 'o', pch = 0, col = 'blue', lwd = 2, xlab = expression(n[2]), ylab = 'FDR', main = eval(main), cex.main = 0.8, ylim = c(0, max(FDR_n1[, c(3,4,5,6,7)])))
plot(FDR_n1$n2, FDR_n1$X1D_NPMLE, type = 'o', pch = 0, col = 'blue', lwd = 2, xlab = expression(K[B]), ylab = 'FDR', ylim = c(0, max(FDR_n1[, c(3,4,5,6,7,8,9)], 0.1)), cex.lab = 1.5)
lines(FDR_n1$n2, FDR_n1$X2D_NPMLE, type = 'o', pch = 1, col = 'black', lwd = 2)
lines(FDR_n1$n2, FDR_n1$Welch, type = 'o', pch = 2, col = 'green', lwd = 2)
lines(FDR_n1$n2, FDR_n1$B_F, type = 'o', pch = 5, col = 'pink', lwd = 2)
lines(FDR_n1$n2, FDR_n1$t_test, type = 'o', pch = 6, col = 'red', lwd = 2)
#lines(FDR_n1$n2, FDR_n1$EV2_NPMLE, type = 'o', pch = 7, col = 'darkblue', lwd = 2)
abline(h = 0.1, lwd = 2, col = 'grey', lty = 2)
#legend('topleft', c('1D_NPMLE', '2D_NPMLE', 'Welch', 'B_F', 'Pooled_t_test'), col=c('blue', 'black', 'green', 'pink', 'red'), pch = c(0,1,2,5,6), lwd=2, lty = 1, cex = 0.6)
}
Power_plotter = function(n1, length_n2, Full_Power_Data) {
n2_range = c(n1: (n1 + length_n2 - 1))
Power_n1 = Full_Power_Data[Full_Power_Data$n1 == n1 & (Full_Power_Data$n2 %in% n2_range), ]
#main = substitute(expression(paste('Relation between Power and ', n[2], ' for All Algorithms when ', n[1] == N1)), list(N1 = n1))
#plot(Power_n1$n2, Power_n1$X1D_NPMLE, type = 'o', pch = 0, col = 'blue', lwd = 2, xlab = expression(n[2]), ylab = 'Power', main = eval(main), cex.main = 0.8, ylim = c(min(Power_n1[, c(3,4,5,6,7)]), max(Power_n1[, c(3,4,5,6,7)])))
plot(Power_n1$n2, Power_n1$X1D_NPMLE, type = 'o', pch = 0, col = 'blue', lwd = 2, xlab = expression(K[B]), ylab = 'Power', ylim = c(0, max(Power_n1[, c(3,4,5,6,7,8,9)])), cex.lab = 1.5)
lines(Power_n1$n2, Power_n1$X2D_NPMLE, type = 'o', pch = 1, col = 'black', lwd = 2)
lines(Power_n1$n2, Power_n1$Welch, type = 'o', pch = 2, col = 'green', lwd = 2)
lines(Power_n1$n2, Power_n1$B_F, type = 'o', pch = 5, col = 'pink', lwd = 2)
lines(Power_n1$n2, Power_n1$t_test, type = 'o', pch = 6, col = 'red', lwd = 2)
#lines(Power_n1$n2, Power_n1$EV_NPMLE, type = 'o', pch = 3, col = '#87CEFA', lwd = 2)
#lines(Power_n1$n2, Power_n1$EV2_NPMLE, type = 'o', pch = 7, col = 'darkblue', lwd = 2)
#legend(n1 + length_n2 - 2, 2/3*min(Power_n1[, c(3,4,5,6,7)]) + 1/3*max(Power_n1[, c(3,4,5,6,7)]), c('1D_NPMLE', '2D_NPMLE', 'Welch', 'B_F', 'Pooled_t_test'), col=c('blue', 'black', 'green', 'pink', 'red'), pch = c(0,1,2,5,6), lwd=2, lty = 1, cex = 0.6)
}
png("combined_plot_with_legend.png", width = 3200, height = 2400, res = 300)
par(mfrow = c(2, 2), mar = c(4,4,4,4), oma = c(1, 2, 0, 13), mgp = c(2.8, 1, 0))
FDR_plotter(3,7,Full_FDR_Data)
Power_plotter(3,7,Full_Power_Data)
FDR_plotter(5,7,Full_FDR_Data)
Power_plotter(5,7,Full_Power_Data)
#FDR_plotter(7,7,Full_FDR_Data)
#Power_plotter(7,7,Full_Power_Data)
#par(mfrow = c(1,1))
par(xpd = NA)
legend('topright', c('1D-NPMLE', '2D-NPMLE', 'Welch', 'B-F', 't-test'), col=c('blue', 'black', 'green', 'pink', 'red'), pch = c(0,1,2,5,6), lwd=2, lty = 1, cex = 1.3, inset = c(-0.8, -1.512))
dev.off()
png("combined_plot_with_legend.png", width = 3200, height = 2400, res = 300)
par(mfrow = c(2, 2), mar = c(4,4,2,4), oma = c(1, 2, 0, 13), mgp = c(2.8, 1, 0))
FDR_plotter(3,7,Full_FDR_Data)
Power_plotter(3,7,Full_Power_Data)
FDR_plotter(5,7,Full_FDR_Data)
Power_plotter(5,7,Full_Power_Data)
#FDR_plotter(7,7,Full_FDR_Data)
#Power_plotter(7,7,Full_Power_Data)
#par(mfrow = c(1,1))
par(xpd = NA)
legend('topright', c('1D-NPMLE', '2D-NPMLE', 'Welch', 'B-F', 't-test'), col=c('blue', 'black', 'green', 'pink', 'red'), pch = c(0,1,2,5,6), lwd=2, lty = 1, cex = 1.3, inset = c(-0.8, -1.512))
dev.off()
png("combined_plot_with_legend.png", width = 3200, height = 2400, res = 300)
par(mfrow = c(2, 2), mar = c(4,4,2,2), oma = c(1, 2, 0, 13), mgp = c(2.8, 1, 0))
FDR_plotter(3,7,Full_FDR_Data)
Power_plotter(3,7,Full_Power_Data)
FDR_plotter(5,7,Full_FDR_Data)
Power_plotter(5,7,Full_Power_Data)
#FDR_plotter(7,7,Full_FDR_Data)
#Power_plotter(7,7,Full_Power_Data)
#par(mfrow = c(1,1))
par(xpd = NA)
legend('topright', c('1D-NPMLE', '2D-NPMLE', 'Welch', 'B-F', 't-test'), col=c('blue', 'black', 'green', 'pink', 'red'), pch = c(0,1,2,5,6), lwd=2, lty = 1, cex = 1.3, inset = c(-0.8, -1.512))
dev.off()
png("combined_plot_with_legend.png", width = 3200, height = 2400, res = 300)
par(mfrow = c(2, 2), mar = c(4,4,2,2), oma = c(1, 2, 0, 13), mgp = c(2.8, 1, 0))
FDR_plotter(3,7,Full_FDR_Data)
Power_plotter(3,7,Full_Power_Data)
FDR_plotter(5,7,Full_FDR_Data)
Power_plotter(5,7,Full_Power_Data)
#FDR_plotter(7,7,Full_FDR_Data)
#Power_plotter(7,7,Full_Power_Data)
#par(mfrow = c(1,1))
par(xpd = NA)
legend('topright', c('1D-NPMLE', '2D-NPMLE', 'Welch', 'B-F', 't-test'), col=c('blue', 'black', 'green', 'pink', 'red'), pch = c(0,1,2,5,6), lwd=2, lty = 1, cex = 1.3, inset = c(-0.4, -0.512))
dev.off()
png("combined_plot_with_legend.png", width = 3200, height = 2400, res = 300)
par(mfrow = c(2, 2), mar = c(4,4,2,2), oma = c(1, 2, 0, 13), mgp = c(2.8, 1, 0))
FDR_plotter(3,7,Full_FDR_Data)
Power_plotter(3,7,Full_Power_Data)
FDR_plotter(5,7,Full_FDR_Data)
Power_plotter(5,7,Full_Power_Data)
#FDR_plotter(7,7,Full_FDR_Data)
#Power_plotter(7,7,Full_Power_Data)
#par(mfrow = c(1,1))
par(xpd = NA)
legend('topright', c('1D-NPMLE', '2D-NPMLE', 'Welch', 'B-F', 't-test'), col=c('blue', 'black', 'green', 'pink', 'red'), pch = c(0,1,2,5,6), lwd=2, lty = 1, cex = 1.3, inset = c(-0.8, -0.512))
dev.off()
png("combined_plot_with_legend.png", width = 3200, height = 2400, res = 300)
par(mfrow = c(2, 2), mar = c(4,4,2,2), oma = c(1, 2, 0, 13), mgp = c(2.8, 1, 0))
FDR_plotter(3,7,Full_FDR_Data)
Power_plotter(3,7,Full_Power_Data)
FDR_plotter(5,7,Full_FDR_Data)
Power_plotter(5,7,Full_Power_Data)
#FDR_plotter(7,7,Full_FDR_Data)
#Power_plotter(7,7,Full_Power_Data)
#par(mfrow = c(1,1))
par(xpd = NA)
legend('topright', c('1D-NPMLE', '2D-NPMLE', 'Welch', 'B-F', 't-test'), col=c('blue', 'black', 'green', 'pink', 'red'), pch = c(0,1,2,5,6), lwd=2, lty = 1, cex = 1.5, inset = c(-0.8, -0.512))
dev.off()
png("combined_plot_with_legend.png", width = 3200, height = 2400, res = 300)
par(mfrow = c(2, 2), mar = c(4,4,2,2), oma = c(1, 2, 0, 13), mgp = c(2.8, 1, 0))
FDR_plotter(3,7,Full_FDR_Data)
Power_plotter(3,7,Full_Power_Data)
FDR_plotter(5,7,Full_FDR_Data)
Power_plotter(5,7,Full_Power_Data)
#FDR_plotter(7,7,Full_FDR_Data)
#Power_plotter(7,7,Full_Power_Data)
#par(mfrow = c(1,1))
par(xpd = NA)
legend('topright', c('1D-NPMLE', '2D-NPMLE', 'Welch', 'B-F', 't-test'), col=c('blue', 'black', 'green', 'pink', 'red'), pch = c(0,1,2,5,6), lwd=2, lty = 1, cex = 1.5, inset = c(-0.8, -1.512))
dev.off()
png("combined_plot_with_legend.png", width = 3200, height = 2400, res = 300)
par(mfrow = c(2, 2), mar = c(4,4,2,2), oma = c(1, 2, 0, 13), mgp = c(2.8, 1, 0))
FDR_plotter(3,7,Full_FDR_Data)
Power_plotter(3,7,Full_Power_Data)
FDR_plotter(5,7,Full_FDR_Data)
Power_plotter(5,7,Full_Power_Data)
#FDR_plotter(7,7,Full_FDR_Data)
#Power_plotter(7,7,Full_Power_Data)
#par(mfrow = c(1,1))
par(xpd = NA)
legend('topright', c('1D-NPMLE', '2D-NPMLE', 'Welch', 'B-F', 't-test'), col=c('blue', 'black', 'green', 'pink', 'red'), pch = c(0,1,2,5,6), lwd=2, lty = 1, cex = 1.5, inset = c(-0.8, -1.312))
dev.off()
png("combined_plot_with_legend.png", width = 3200, height = 2400, res = 300)
par(mfrow = c(2, 2), mar = c(4,4,2,2), oma = c(1, 2, 0, 13), mgp = c(2.8, 1, 0))
FDR_plotter(3,7,Full_FDR_Data)
Power_plotter(3,7,Full_Power_Data)
FDR_plotter(5,7,Full_FDR_Data)
Power_plotter(5,7,Full_Power_Data)
#FDR_plotter(7,7,Full_FDR_Data)
#Power_plotter(7,7,Full_Power_Data)
#par(mfrow = c(1,1))
par(xpd = NA)
legend('topright', c('1D-NPMLE', '2D-NPMLE', 'Welch', 'B-F', 't-test'), col=c('blue', 'black', 'green', 'pink', 'red'), pch = c(0,1,2,5,6), lwd=2, lty = 1, cex = 1.5, inset = c(-0.74, -1.342))
dev.off()
Full_FDR_Data = read.csv('./Full Data/Full_FDR_Data.csv')
Full_Power_Data = read.csv('./Full Data/Full_Power_Data.csv')
Full_Power_Data
FDR_plotter = function(n1, length_n2, Full_FDR_Data) {
n2_range = c(n1: (n1 + length_n2 - 1))
FDR_n1 = Full_FDR_Data[Full_FDR_Data$n1 == n1 & (Full_FDR_Data$n2 %in% n2_range), ]
#main = substitute(expression(paste('Relation between FDR and ', n[2], ' for All Algorithms when ', n[1] == N1)), list(N1 = n1))
#plot(FDR_n1$n2, FDR_n1$X1D_NPMLE, type = 'o', pch = 0, col = 'blue', lwd = 2, xlab = expression(n[2]), ylab = 'FDR', main = eval(main), cex.main = 0.8, ylim = c(0, max(FDR_n1[, c(3,4,5,6,7)])))
plot(FDR_n1$n2, FDR_n1$X1D_NPMLE, type = 'o', pch = 0, col = 'blue', lwd = 2, xlab = expression(K[B]), ylab = 'FDR', ylim = c(0, max(FDR_n1[, c(3,4,5,6,7,8,9,10)], 0.1)), cex.lab = 1.5)
lines(FDR_n1$n2, FDR_n1$X2D_NPMLE, type = 'o', pch = 1, col = 'black', lwd = 2)
lines(FDR_n1$n2, FDR_n1$Welch, type = 'o', pch = 2, col = 'green', lwd = 2)
lines(FDR_n1$n2, FDR_n1$B_F, type = 'o', pch = 5, col = 'pink', lwd = 2)
lines(FDR_n1$n2, FDR_n1$Pooled_t, type = 'o', pch = 6, col = 'red', lwd = 2)
#lines(FDR_n1$n2, FDR_n1$EV2_NPMLE, type = 'o', pch = 7, col = 'darkblue', lwd = 2)
#lines(FDR_n1$n2, FDR_n1$Welch_NPMLE, type = 'o', pch = 8, col = 'yellow', lwd = 2)
abline(h = 0.1, lwd = 2, col = 'grey', lty = 2)
#legend('topleft', c('1D_NPMLE', '2D_NPMLE', 'Welch', 'B_F', 'Pooled_t_test'), col=c('blue', 'black', 'green', 'pink', 'red'), pch = c(0,1,2,5,6), lwd=2, lty = 1, cex = 0.6)
}
Power_plotter = function(n1, length_n2, Full_Power_Data) {
n2_range = c(n1: (n1 + length_n2 - 1))
Power_n1 = Full_Power_Data[Full_Power_Data$n1 == n1 & (Full_Power_Data$n2 %in% n2_range), ]
#main = substitute(expression(paste('Relation between Power and ', n[2], ' for All Algorithms when ', n[1] == N1)), list(N1 = n1))
#plot(Power_n1$n2, Power_n1$X1D_NPMLE, type = 'o', pch = 0, col = 'blue', lwd = 2, xlab = expression(n[2]), ylab = 'Power', main = eval(main), cex.main = 0.8, ylim = c(min(Power_n1[, c(3,4,5,6,7)]), max(Power_n1[, c(3,4,5,6,7)])))
plot(Power_n1$n2, Power_n1$X1D_NPMLE, type = 'o', pch = 0, col = 'blue', lwd = 2, xlab = expression(K[B]), ylab = 'Power', ylim = c(0, max(Power_n1[, c(3,4,5,6,7,8,9,10)])), cex.lab = 1.5)
lines(Power_n1$n2, Power_n1$X2D_NPMLE, type = 'o', pch = 1, col = 'black', lwd = 2)
lines(Power_n1$n2, Power_n1$Welch, type = 'o', pch = 2, col = 'green', lwd = 2)
lines(Power_n1$n2, Power_n1$B_F, type = 'o', pch = 5, col = 'pink', lwd = 2)
lines(Power_n1$n2, Power_n1$Pooled_t, type = 'o', pch = 6, col = 'red', lwd = 2)
#lines(Power_n1$n2, Power_n1$EV2_NPMLE, type = 'o', pch = 7, col = 'darkblue', lwd = 2)
#lines(Power_n1$n2, Power_n1$Welch_NPMLE, type = 'o', pch = 8, col = 'yellow', lwd = 2)
#legend(n1 + length_n2 - 2, 2/3*min(Power_n1[, c(3,4,5,6,7)]) + 1/3*max(Power_n1[, c(3,4,5,6,7)]), c('1D_NPMLE', '2D_NPMLE', 'Welch', 'B_F', 'Pooled_t_test'), col=c('blue', 'black', 'green', 'pink', 'red'), pch = c(0,1,2,5,6), lwd=2, lty = 1, cex = 0.6)
}
#par(mfrow = c(3,2))
png("combined_plot_with_legend.png", width = 4000, height = 1500, res = 300)
par(mfrow = c(1, 2), mar = c(4,4,2,2), oma = c(1, 1, 0, 13), mgp = c(2.8, 1, 0))
FDR_plotter(3,7,Full_FDR_Data)
Power_plotter(3,7,Full_Power_Data)
#FDR_plotter(5,7,Full_FDR_Data)
#Power_plotter(5,7,Full_Power_Data)
#FDR_plotter(7,7,Full_FDR_Data)
#Power_plotter(7,7,Full_Power_Data)
#par(mfrow = c(1,1))
par(xpd = NA)
legend('topright', c('VREPB', 'DVEPB', 'Welch', 'B-F', 't-test'), col=c('blue', 'black', 'green', 'pink', 'red'), pch = c(0,1,2,5,6), lwd=2, lty = 1, cex = 1.5, inset = c(-0.6 , 0))
dev.off()
#par(mfrow = c(3,2))
png("combined_plot_with_legend.png", width = 4000, height = 1500, res = 300)
par(mfrow = c(1, 2), mar = c(4,4,2,2), oma = c(1, 1, 0, 13), mgp = c(2.8, 1, 0))
FDR_plotter(5,7,Full_FDR_Data)
Power_plotter(5,7,Full_Power_Data)
#FDR_plotter(5,7,Full_FDR_Data)
#Power_plotter(5,7,Full_Power_Data)
#FDR_plotter(7,7,Full_FDR_Data)
#Power_plotter(7,7,Full_Power_Data)
#par(mfrow = c(1,1))
par(xpd = NA)
legend('topright', c('VREPB', 'DVEPB', 'Welch', 'B-F', 't-test'), col=c('blue', 'black', 'green', 'pink', 'red'), pch = c(0,1,2,5,6), lwd=2, lty = 1, cex = 1.5, inset = c(-0.6, 0))
dev.off()
Full_FDR_Data = read.csv('./Full Data/Full_FDR_Data_new.csv')
Full_Power_Data = read.csv('./Full Data/Full_Power_Data_new.csv')
Full_FDR_Data
FDR_plotter = function(n1, length_n2, Full_FDR_Data) {
n2_range = c(n1: (n1 + length_n2 - 1))
FDR_n1 = Full_FDR_Data[Full_FDR_Data$n1 == n1 & (Full_FDR_Data$n2 %in% n2_range), ]
#main = substitute(expression(paste('Relation between FDR and ', n[2], ' for All Algorithms when ', n[1] == N1)), list(N1 = n1))
#plot(FDR_n1$n2, FDR_n1$X1D_NPMLE, type = 'o', pch = 0, col = 'blue', lwd = 2, xlab = expression(n[2]), ylab = 'FDR', main = eval(main), cex.main = 0.8, ylim = c(0, max(FDR_n1[, c(3,4,5,6,7)])))
plot(FDR_n1$n2, FDR_n1$X1D_NPMLE, type = 'o', pch = 0, col = 'blue', lwd = 2, xlab = expression(K[B]), ylab = 'FDR', ylim = c(0, max(FDR_n1[, c(3,4,5,6,7,8,9)], 0.1)), cex.lab = 1.5)
lines(FDR_n1$n2, FDR_n1$X2D_NPMLE, type = 'o', pch = 1, col = 'black', lwd = 2)
lines(FDR_n1$n2, FDR_n1$Welch, type = 'o', pch = 2, col = 'green', lwd = 2)
lines(FDR_n1$n2, FDR_n1$B_F, type = 'o', pch = 5, col = 'pink', lwd = 2)
lines(FDR_n1$n2, FDR_n1$t_test, type = 'o', pch = 6, col = 'red', lwd = 2)
#lines(FDR_n1$n2, FDR_n1$EV2_NPMLE, type = 'o', pch = 7, col = 'darkblue', lwd = 2)
abline(h = 0.1, lwd = 2, col = 'grey', lty = 2)
#legend('topleft', c('1D_NPMLE', '2D_NPMLE', 'Welch', 'B_F', 'Pooled_t_test'), col=c('blue', 'black', 'green', 'pink', 'red'), pch = c(0,1,2,5,6), lwd=2, lty = 1, cex = 0.6)
}
Power_plotter = function(n1, length_n2, Full_Power_Data) {
n2_range = c(n1: (n1 + length_n2 - 1))
Power_n1 = Full_Power_Data[Full_Power_Data$n1 == n1 & (Full_Power_Data$n2 %in% n2_range), ]
#main = substitute(expression(paste('Relation between Power and ', n[2], ' for All Algorithms when ', n[1] == N1)), list(N1 = n1))
#plot(Power_n1$n2, Power_n1$X1D_NPMLE, type = 'o', pch = 0, col = 'blue', lwd = 2, xlab = expression(n[2]), ylab = 'Power', main = eval(main), cex.main = 0.8, ylim = c(min(Power_n1[, c(3,4,5,6,7)]), max(Power_n1[, c(3,4,5,6,7)])))
plot(Power_n1$n2, Power_n1$X1D_NPMLE, type = 'o', pch = 0, col = 'blue', lwd = 2, xlab = expression(K[B]), ylab = 'Power', ylim = c(0, max(Power_n1[, c(3,4,5,6,7,8,9)])), cex.lab = 1.5)
lines(Power_n1$n2, Power_n1$X2D_NPMLE, type = 'o', pch = 1, col = 'black', lwd = 2)
lines(Power_n1$n2, Power_n1$Welch, type = 'o', pch = 2, col = 'green', lwd = 2)
lines(Power_n1$n2, Power_n1$B_F, type = 'o', pch = 5, col = 'pink', lwd = 2)
lines(Power_n1$n2, Power_n1$t_test, type = 'o', pch = 6, col = 'red', lwd = 2)
#lines(Power_n1$n2, Power_n1$EV_NPMLE, type = 'o', pch = 3, col = '#87CEFA', lwd = 2)
#lines(Power_n1$n2, Power_n1$EV2_NPMLE, type = 'o', pch = 7, col = 'darkblue', lwd = 2)
#legend(n1 + length_n2 - 2, 2/3*min(Power_n1[, c(3,4,5,6,7)]) + 1/3*max(Power_n1[, c(3,4,5,6,7)]), c('1D_NPMLE', '2D_NPMLE', 'Welch', 'B_F', 'Pooled_t_test'), col=c('blue', 'black', 'green', 'pink', 'red'), pch = c(0,1,2,5,6), lwd=2, lty = 1, cex = 0.6)
}
FDR_plotter = function(n1, length_n2, Full_FDR_Data) {
n2_range = c(n1: (n1 + length_n2 - 1))
FDR_n1 = Full_FDR_Data[Full_FDR_Data$n1 == n1 & (Full_FDR_Data$n2 %in% n2_range), ]
#main = substitute(expression(paste('Relation between FDR and ', n[2], ' for All Algorithms when ', n[1] == N1)), list(N1 = n1))
#plot(FDR_n1$n2, FDR_n1$X1D_NPMLE, type = 'o', pch = 0, col = 'blue', lwd = 2, xlab = expression(n[2]), ylab = 'FDR', main = eval(main), cex.main = 0.8, ylim = c(0, max(FDR_n1[, c(3,4,5,6,7)])))
plot(FDR_n1$n2, FDR_n1$X1D_NPMLE, type = 'o', pch = 0, col = 'blue', lwd = 2, xlab = expression(K[B]), ylab = 'FDR', ylim = c(0, max(FDR_n1[, c(3,4,5,6,7,8,9)], 0.1)), cex.lab = 1.5)
lines(FDR_n1$n2, FDR_n1$X2D_NPMLE, type = 'o', pch = 1, col = 'black', lwd = 2)
lines(FDR_n1$n2, FDR_n1$Welch, type = 'o', pch = 2, col = 'green', lwd = 2)
lines(FDR_n1$n2, FDR_n1$B_F, type = 'o', pch = 5, col = 'pink', lwd = 2)
lines(FDR_n1$n2, FDR_n1$t_test, type = 'o', pch = 6, col = 'red', lwd = 2)
#lines(FDR_n1$n2, FDR_n1$EV2_NPMLE, type = 'o', pch = 7, col = 'darkblue', lwd = 2)
abline(h = 0.1, lwd = 2, col = 'grey', lty = 2)
#legend('topleft', c('1D_NPMLE', '2D_NPMLE', 'Welch', 'B_F', 'Pooled_t_test'), col=c('blue', 'black', 'green', 'pink', 'red'), pch = c(0,1,2,5,6), lwd=2, lty = 1, cex = 0.6)
}
Power_plotter = function(n1, length_n2, Full_Power_Data) {
n2_range = c(n1: (n1 + length_n2 - 1))
Power_n1 = Full_Power_Data[Full_Power_Data$n1 == n1 & (Full_Power_Data$n2 %in% n2_range), ]
#main = substitute(expression(paste('Relation between Power and ', n[2], ' for All Algorithms when ', n[1] == N1)), list(N1 = n1))
#plot(Power_n1$n2, Power_n1$X1D_NPMLE, type = 'o', pch = 0, col = 'blue', lwd = 2, xlab = expression(n[2]), ylab = 'Power', main = eval(main), cex.main = 0.8, ylim = c(min(Power_n1[, c(3,4,5,6,7)]), max(Power_n1[, c(3,4,5,6,7)])))
plot(Power_n1$n2, Power_n1$X1D_NPMLE, type = 'o', pch = 0, col = 'blue', lwd = 2, xlab = expression(K[B]), ylab = 'Power', ylim = c(0, max(Power_n1[, c(3,4,5,6,7,8,9)])), cex.lab = 1.5)
lines(Power_n1$n2, Power_n1$X2D_NPMLE, type = 'o', pch = 1, col = 'black', lwd = 2)
lines(Power_n1$n2, Power_n1$Welch, type = 'o', pch = 2, col = 'green', lwd = 2)
lines(Power_n1$n2, Power_n1$B_F, type = 'o', pch = 5, col = 'pink', lwd = 2)
lines(Power_n1$n2, Power_n1$t_test, type = 'o', pch = 6, col = 'red', lwd = 2)
#lines(Power_n1$n2, Power_n1$EV_NPMLE, type = 'o', pch = 3, col = '#87CEFA', lwd = 2)
#lines(Power_n1$n2, Power_n1$EV2_NPMLE, type = 'o', pch = 7, col = 'darkblue', lwd = 2)
#legend(n1 + length_n2 - 2, 2/3*min(Power_n1[, c(3,4,5,6,7)]) + 1/3*max(Power_n1[, c(3,4,5,6,7)]), c('1D_NPMLE', '2D_NPMLE', 'Welch', 'B_F', 'Pooled_t_test'), col=c('blue', 'black', 'green', 'pink', 'red'), pch = c(0,1,2,5,6), lwd=2, lty = 1, cex = 0.6)
}
png("combined_plot_with_legend.png", width = 3200, height = 2400, res = 300)
par(mfrow = c(2, 2), mar = c(4,4,2,2), oma = c(1, 2, 0, 13), mgp = c(2.8, 1, 0))
FDR_plotter(3,7,Full_FDR_Data)
Power_plotter(3,7,Full_Power_Data)
FDR_plotter(5,7,Full_FDR_Data)
Power_plotter(5,7,Full_Power_Data)
#FDR_plotter(7,7,Full_FDR_Data)
#Power_plotter(7,7,Full_Power_Data)
#par(mfrow = c(1,1))
par(xpd = NA)
legend('topright', c('RVEPB', 'DVEPB', 'Welch', 'B-F', 't-test'), col=c('blue', 'black', 'green', 'pink', 'red'), pch = c(0,1,2,5,6), lwd=2, lty = 1, cex = 1.5, inset = c(-0.74, -1.342))
dev.off()
library(Equalden.HD)
data(Hedenfalk)
source('EPB.R')
source('helper.R')
nrow(Hedenfalk)
head(Hedenfalk)
X1 = Hedenfalk[, 1:7]
X2 = Hedenfalk[, 8:15]
info = information_extractor(X1, X2)
tau_list = info$S1_list/info$S2_list
log_tau_list = log(tau_list)
log_tau_list = log_tau_list[log_tau_list >= -5]
tau_grid = exp(seq(min(log_tau_list), max(log_tau_list), length.out = 1000))
X1_1 = X1[1, ]
X2_1 = X2[1, ]
K1 = length(X1_1)
K2 = length(X2_1)
m1 = mean(X1_1)
m2 = mean(X2_1)
sd1 = sqrt(var(X1_1))
sd2 = sqrt(var(X2_1))
se = sqrt(sd1^2/K1 + sd2^2/K2)
md = m1 - m2
t = md / se
t_BF_list = c()
D = c()
for (i in 1:nrow(Hedenfalk)) {
m1_i = mean(X1[i, ])
m2_i = mean(X2[i, ])
s1_i = var(X1[i, ])
s2_i = var(X2[i, ])
t_BF_i = (m1_i - m2_i) / sqrt(s1_i/K1 + s2_i/K2)
t_BF_list = c(t_BF_list, t_BF_i)
Di = s1_i/K1 + s2_i/K2
D = c(D, Di)
}
max(t_BF_list)
D = D[log(tau_list) >= -5]
t_BF_list = t_BF_list[log(tau_list) >= -5]
result_csv = read.csv('./Result/2D_Hedenfalk.csv')
grid = result_csv[, 2:3]
mass = result_csv[, 4]
cutoff_1DNPMLE = 0.0026508907
cutoff_2DNPMLE = 0.0030585356
cutoff_Welch = 0.0002270525
cutoff_pooled_t = 0.0038435845
cutoff_B_F = -Inf
cutoff_EV_NPMLE = 0.0035106845
grid_1D = grid[, 1] / grid[, 2]
bfresult = bfTest(X1_1, X2_1)
bfresult
t_BF_005 = c()
for (tau in tau_grid) {
t_BF_005_i = BF_pvalue_BF_solver_positive(tau, K1, K2, 0.05)
t_BF_005 = append(t_BF_005, t_BF_005_i)
}
t_BF_bh = c()
for (tau in tau_grid) {
t_BF_bh_i = BF_pvalue_BF_solver_positive(tau, K1, K2, 0.1)
t_BF_bh = append(t_BF_bh, t_BF_bh_i)
}
p_value_npmle_j(K1, K2, m1, m2, sd1^2, sd2^2, grid_1D, mass, sd1^2/sd2^2)
BF_pvalue_1DNPMLE(t, K1, K2, grid_1D, mass, sd1^2/sd2^2)
BF_pvalue_1DNPMLE_solver_positive(K1, K2, grid_1D, mass, sd1^2/sd2^2, 0.05)
t_1DNPMLE_005 = c()
#t_1DNPMLE_bh = c()
for (tau in tau_grid) {
t_1DNPMLE_005_i = BF_pvalue_1DNPMLE_solver_positive(K1, K2, grid_1D, mass, tau, 0.05)
#t_1DNPMLE_bh_i = BF_pvalue_1DNPMLE_solver_positive(K1, K2, grid_1D, mass, tau, cutoff_1DNPMLE)
t_1DNPMLE_005 = append(t_1DNPMLE_005, t_1DNPMLE_005_i)
#t_1DNPMLE_bh = append(t_1DNPMLE_bh, t_1DNPMLE_bh_i)
}
Welch_approximation_p(K1, K2, m1, m2, sd1^2, sd2^2)
BF_pvalue_Welch(t, sd1^2/sd2^2, K1, K2)
BF_pvalue_Welch_solver_positive(sd1^2/sd2^2, K1, K2, 0.05)
t
t_Welch_005 = c()
#t_Welch_bh = c()
for (tau in tau_grid) {
t_Welch_005_i = BF_pvalue_Welch_solver_positive(tau, K1, K2, 0.05)
#t_Welch_bh_i = BF_pvalue_Welch_solver_positive(tau, K1, K2, cutoff_Welch)
t_Welch_005 = append(t_Welch_005, t_Welch_005_i)
#t_Welch_bh = append(t_Welch_bh, t_Welch_bh_i)
}
t.test(X1_1, X2_1, var.equal = TRUE)$p.value
BF_pvalue_t(t, sd1^2/sd2^2, K1, K2)
BF_pvalue_t_solver_positive(sd1^2/sd2^2, K1, K2, 0.05)
t
t_t_005 = c()
#t_t_bh = c()
for (tau in tau_grid) {
t_t_005_i = BF_pvalue_t_solver_positive(tau, K1, K2, 0.05)
#t_t_bh_i = BF_pvalue_t_solver_positive(tau, K1, K2, cutoff_pooled_t)
t_t_005 = append(t_t_005, t_t_005_i)
#t_t_bh = append(t_t_bh, t_t_bh_i)
}
plot_2D = function(u1,u2) {
ggplot(data.frame(u1 = u1, u2 = u2), aes(x = u1, y = u2)) +
stat_bin2d(bins = 80) +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
labs(x = "u1", y = "u2", fill = "Count") +
scale_y_continuous(limits = c(-3, 3)) +
theme_minimal()
}
size = 0.8
plot_2D(log_tau_list, t_BF_list) +
geom_line(size = size, data = data.frame(log_tau_grid = log(tau_grid), y = t_BF_005), aes(x = log_tau_grid, y = y, color = 'B_F (unadj.)')) +
geom_line(size = size, data = data.frame(log_tau_grid = log(tau_grid), y = -t_BF_005), aes(x = log_tau_grid, y = y, color = 'B_F (unadj.)')) +
geom_line(size = size, data = data.frame(log_tau_grid = log(tau_grid), y = t_1DNPMLE_005), aes(x = log_tau_grid, y = y, color = '1D_NPMLE (unadj.)')) +
geom_line(size = size, data = data.frame(log_tau_grid = log(tau_grid), y = -t_1DNPMLE_005), aes(x = log_tau_grid, y = y, color = '1D_NPMLE (unadj.)')) +
geom_line(size = size, data = data.frame(log_tau_grid = log(tau_grid), y = t_Welch_005), aes(x = log_tau_grid, y = y, color = 'Welch (unadj.)')) +
geom_line(size = size, data = data.frame(log_tau_grid = log(tau_grid), y = -t_Welch_005), aes(x = log_tau_grid, y = y, color = 'Welch (unadj.)')) +
geom_line(size = size, data = data.frame(log_tau_grid = log(tau_grid), y = t_t_005), aes(x = log_tau_grid, y = y, color = 'Pooled_t_test (unadj.)')) +
geom_line(size = size, data = data.frame(log_tau_grid = log(tau_grid), y = -t_t_005), aes(x = log_tau_grid, y = y, color = 'Pooled_t_test (unadj.)')) +
scale_color_manual(name = '', values = c('1D_NPMLE (BH)' = 'blue', 'B_F (BH)' = 'pink', 'Welch (BH)' = 'green', 'Pooled t_test (BH)' = 'red', '1D_NPMLE (unadj.)' = 'blue', 'B_F (unadj.)' = 'black', 'Welch (unadj.)' = 'green', 'Pooled_t_test (unadj.)' = 'red')) +
labs(x = expression(log(hat(lambda[i]))), y = expression(T[i]^{BF})) + theme_minimal()
size = 0.8
plot_2D(log_tau_list, t_BF_list) +
geom_line(size = size, data = data.frame(log_tau_grid = log(tau_grid), y = t_BF_005), aes(x = log_tau_grid, y = y, color = 'B-F')) +
geom_line(size = size, data = data.frame(log_tau_grid = log(tau_grid), y = -t_BF_005), aes(x = log_tau_grid, y = y, color = 'B-F')) +
geom_line(size = size, data = data.frame(log_tau_grid = log(tau_grid), y = t_1DNPMLE_005), aes(x = log_tau_grid, y = y, color = 'VREPB')) +
geom_line(size = size, data = data.frame(log_tau_grid = log(tau_grid), y = -t_1DNPMLE_005), aes(x = log_tau_grid, y = y, color = 'VREPB')) +
geom_line(size = size, data = data.frame(log_tau_grid = log(tau_grid), y = t_Welch_005), aes(x = log_tau_grid, y = y, color = 'Welch')) +
geom_line(size = size, data = data.frame(log_tau_grid = log(tau_grid), y = -t_Welch_005), aes(x = log_tau_grid, y = y, color = 'Welch')) +
geom_line(size = size, data = data.frame(log_tau_grid = log(tau_grid), y = t_t_005), aes(x = log_tau_grid, y = y, color = 't-test')) +
geom_line(size = size, data = data.frame(log_tau_grid = log(tau_grid), y = -t_t_005), aes(x = log_tau_grid, y = y, color = 't-test')) +
scale_color_manual(name = '', values = c('1D_NPMLE (BH)' = 'blue', 'B_F (BH)' = 'pink', 'Welch (BH)' = 'green', 'Pooled t_test (BH)' = 'red', 'VREPB' = 'blue', 'B-F' = 'pink', 'Welch' = 'green', 't-test' = 'red')) +
labs(x = expression(log(hat(lambda[i]))), y = expression(T[i]^{BF})) + theme_minimal()
size = 0.8
plot_2D(log_tau_list, t_BF_list) +
geom_line(size = size, data = data.frame(log_tau_grid = log(tau_grid), y = t_1DNPMLE_005), aes(x = log_tau_grid, y = y, color = 'VREPB')) +
geom_line(size = size, data = data.frame(log_tau_grid = log(tau_grid), y = -t_1DNPMLE_005), aes(x = log_tau_grid, y = y, color = 'VREPB')) +
geom_line(size = size, data = data.frame(log_tau_grid = log(tau_grid), y = t_BF_005), aes(x = log_tau_grid, y = y, color = 'B-F')) +
geom_line(size = size, data = data.frame(log_tau_grid = log(tau_grid), y = -t_BF_005), aes(x = log_tau_grid, y = y, color = 'B-F')) +
geom_line(size = size, data = data.frame(log_tau_grid = log(tau_grid), y = t_t_005), aes(x = log_tau_grid, y = y, color = 't-test')) +
geom_line(size = size, data = data.frame(log_tau_grid = log(tau_grid), y = -t_t_005), aes(x = log_tau_grid, y = y, color = 't-test')) +
geom_line(size = size, data = data.frame(log_tau_grid = log(tau_grid), y = t_Welch_005), aes(x = log_tau_grid, y = y, color = 'Welch')) +
geom_line(size = size, data = data.frame(log_tau_grid = log(tau_grid), y = -t_Welch_005), aes(x = log_tau_grid, y = y, color = 'Welch')) +
scale_color_manual(name = '', values = c('1D_NPMLE (BH)' = 'blue', 'B_F (BH)' = 'pink', 'Welch (BH)' = 'green', 'Pooled t_test (BH)' = 'red', 'VREPB' = 'blue', 'B-F' = 'pink', 'Welch' = 'green', 't-test' = 'red')) +
labs(x = expression(log(hat(lambda[i]))), y = expression(T[i]^{BF})) + theme_minimal()
size = 0.8
plot_2D(log_tau_list, t_BF_list) +
geom_line(size = size, data = data.frame(log_tau_grid = log(tau_grid), y = t_1DNPMLE_005), aes(x = log_tau_grid, y = y, color = 'VREPB')) +
geom_line(size = size, data = data.frame(log_tau_grid = log(tau_grid), y = -t_1DNPMLE_005), aes(x = log_tau_grid, y = y, color = 'VREPB')) +
geom_line(size = size, data = data.frame(log_tau_grid = log(tau_grid), y = t_BF_005), aes(x = log_tau_grid, y = y, color = 'B-F')) +
geom_line(size = size, data = data.frame(log_tau_grid = log(tau_grid), y = -t_BF_005), aes(x = log_tau_grid, y = y, color = 'B-F')) +
geom_line(size = size, data = data.frame(log_tau_grid = log(tau_grid), y = t_t_005), aes(x = log_tau_grid, y = y, color = 't-test')) +
geom_line(size = size, data = data.frame(log_tau_grid = log(tau_grid), y = -t_t_005), aes(x = log_tau_grid, y = y, color = 't-test')) +
geom_line(size = size, data = data.frame(log_tau_grid = log(tau_grid), y = t_Welch_005), aes(x = log_tau_grid, y = y, color = 'Welch')) +
geom_line(size = size, data = data.frame(log_tau_grid = log(tau_grid), y = -t_Welch_005), aes(x = log_tau_grid, y = y, color = 'Welch')) +
scale_color_manual(name = '', values = c('VREPB' = 'blue', 'B-F' = 'pink', 'Welch' = 'green', 't-test' = 'red')) +
labs(x = expression(log(hat(lambda[i]))), y = expression(T[i]^{BF})) + theme_minimal()
size = 0.8
plot_2D(log_tau_list, t_BF_list) +
geom_line(size = size, data = data.frame(log_tau_grid = log(tau_grid), y = t_1DNPMLE_005), aes(x = log_tau_grid, y = y, color = 'VREPB')) +
geom_line(size = size, data = data.frame(log_tau_grid = log(tau_grid), y = -t_1DNPMLE_005), aes(x = log_tau_grid, y = y, color = 'VREPB')) +
geom_line(size = size, data = data.frame(log_tau_grid = log(tau_grid), y = t_BF_005), aes(x = log_tau_grid, y = y, color = 'B-F')) +
geom_line(size = size, data = data.frame(log_tau_grid = log(tau_grid), y = -t_BF_005), aes(x = log_tau_grid, y = y, color = 'B-F')) +
geom_line(size = size, data = data.frame(log_tau_grid = log(tau_grid), y = t_t_005), aes(x = log_tau_grid, y = y, color = 't-test')) +
geom_line(size = size, data = data.frame(log_tau_grid = log(tau_grid), y = -t_t_005), aes(x = log_tau_grid, y = y, color = 't-test')) +
geom_line(size = size, data = data.frame(log_tau_grid = log(tau_grid), y = t_Welch_005), aes(x = log_tau_grid, y = y, color = 'Welch')) +
geom_line(size = size, data = data.frame(log_tau_grid = log(tau_grid), y = -t_Welch_005), aes(x = log_tau_grid, y = y, color = 'Welch')) +
scale_color_manual(name = '', values = c('VREPB' = 'blue', 'B-F' = 'black', 'Welch' = 'green', 't-test' = 'red')) +
labs(x = expression(log(hat(lambda[i]))), y = expression(T[i]^{BF})) + theme_minimal()
